# .github/workflows/build-addon.yml
name: Build and Publish Add-on

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        arch: [amd64, aarch64, armhf, armv7, i386]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set build arguments
      id: build-args
      run: |
        case "${{ matrix.arch }}" in
          amd64)
            echo "build-from=ghcr.io/home-assistant/amd64-base:3.19" >> $GITHUB_OUTPUT
            echo "platform=linux/amd64" >> $GITHUB_OUTPUT
            ;;
          aarch64)
            echo "build-from=ghcr.io/home-assistant/aarch64-base:3.19" >> $GITHUB_OUTPUT
            echo "platform=linux/arm64" >> $GITHUB_OUTPUT
            ;;
          armhf)
            echo "build-from=ghcr.io/home-assistant/armhf-base:3.19" >> $GITHUB_OUTPUT
            echo "platform=linux/arm/v6" >> $GITHUB_OUTPUT
            ;;
          armv7)
            echo "build-from=ghcr.io/home-assistant/armv7-base:3.19" >> $GITHUB_OUTPUT
            echo "platform=linux/arm/v7" >> $GITHUB_OUTPUT
            ;;
          i386)
            echo "build-from=ghcr.io/home-assistant/i386-base:3.19" >> $GITHUB_OUTPUT
            echo "platform=linux/386" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.arch }}
          type=ref,event=pr,suffix=-${{ matrix.arch }}
          type=semver,pattern={{version}},suffix=-${{ matrix.arch }}
          type=raw,value=latest,suffix=-${{ matrix.arch }},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ steps.build-args.outputs.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_FROM=${{ steps.build-args.outputs.build-from }}
        cache-from: type=gha,scope=${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=${{ matrix.arch }}

  create-manifest:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and push manifest
      run: |
        # Determine tag
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="latest"
        fi
        
        # Create manifest list
        docker manifest create \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION} \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-amd64 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-aarch64 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-armhf \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-armv7 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-i386
        
        # Push manifest
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}

  make-public:
    runs-on: ubuntu-latest
    needs: [build, create-manifest]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Make package public
      run: |
        # Wait for package to be fully created
        sleep 60
        
        # Extract repository name
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        
        # Make the package public using GitHub CLI
        curl -L \
          -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/user/packages/container/${REPO_NAME} \
          -d '{"visibility":"public"}' || echo "Package may already be public"